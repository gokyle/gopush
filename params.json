{"tagline":"Pushover notifications in Go","name":"gopush","body":"## gopush\r\n### a Go client library for Pushover notifications\r\n\r\n**Note:** this is the Git repository to allow Heroku users to employ `gopush` in their webapps, as it appears the Go buildpack doesn't support mercurial at this time. The main repository is a Mercurial repository at [Bitbucket](https://bitbucket.org/kisom/gopush/); all development happens there and is pushed here.\r\n\r\nThis is my first real Go program, so *caveat emptor*.\r\n\r\n`gopush` provides an interface to [Superblock's](https://superblock.net)\r\n[Pushover](https://pushover.net).\r\n\r\nTo use it, use the import `\"bitbucket.org/kisom/gopush/pushover\"`.\r\n\r\nExample usage:\r\n\r\n    package main\r\n    \r\n    import (\r\n    \t\"fmt\"\r\n    \t\"bitbucket.org/kisom/gopush/pushover\"\r\n    \t\"os\"\r\n    \t\"path/filepath\"\r\n    )\r\n    \r\n    func main() {\r\n    \tif len(os.Args) < 3 {\r\n    \t\tfmt.Printf(\"usage: %s api_key user_key\\n\", filepath.Base(os.Args[0]))\r\n    \t\tos.Exit(1)\r\n    \t}\r\n    \r\n    \tidentity := pushover.Authenticate(\r\n    \t\tos.Args[1],\r\n    \t\tos.Args[2],\r\n    \t)\r\n    \r\n    \tsent := pushover.Notify(identity,\"testing gopush\")\r\n    \tif !sent {\r\n    \t\tfmt.Println(\"[!] notification failed.\")\r\n    \t\tos.Exit(1)\r\n    \t}\r\n    }\r\n    \r\n## Notification functions:\r\n\r\n### Authenticate\r\n`Authenticate` returns an Identity struct. To create one, call the Authentication\r\nfunction with the API token and user key:\r\n\r\n    identity := pushover.Authenticate(token, user_key)\r\n\r\n### Notify\r\n`Notify` is the most basic notification function. Its signature is:\r\n    \r\n    Notify(Identity, string) bool\r\n\r\n`Notify` returns `true` if the message was sent successfully, and `false`\r\notherwise.\r\n\r\n### Notify\\_titled\r\n`Notify_titled` is used to send a notification with a custom title. Its \r\nsignature is:\r\n\r\n    Notify_titled(Identity, string, string) bool\r\n\r\nThe first string is the message, the second string is the title. It returns the\r\nsame as `Notify`.\r\n\r\n### Notify\\_device\r\n`Notify_device` is used to send a notification to a specific device. Its \r\nsignature is:\r\n\r\n    Notify_titled(Identity, string, string) bool\r\n\r\nThe first string is the message, the second string is the device name. It returns\r\nthe same as `Notify`.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}